import psycopg2
from flask import Flask, jsonify

# Function to fetch vulnerabilities from the database
def get_vulnerabilities():
    try:
        # Establish a connection to the PostgreSQL database
        connection = psycopg2.connect(
            database="vulnerabilities_db",  # Database name
            user="postgres",               # Username
            password="12345678",           # Password
            host="localhost",              # Host address
            port="5432"                    # Port number
        )
        cursor = connection.cursor()
        
        # Execute a query to fetch all records from the vulnerabilities table
        cursor.execute("SELECT title, endpoint, severity, cve, description, sensor FROM vuln;")
        rows = cursor.fetchall()
        
        # Transform rows into a list of dictionaries for easier processing
        vulnerabilities = [
            {
                "title": row[0],
                "endpoint": row[1],
                "severity": row[2],
                "cve": row[3],
                "description": row[4],
                "sensor": row[5]
            }
            for row in rows
        ]
        return vulnerabilities
    except Exception as e:
        # Handle and print any database connection or query errors
        print(f"Database error: {e}")
        return []
    finally:
        # Ensure database connection is closed
        if connection:
            cursor.close()
            connection.close()

# Function to group vulnerabilities based on similarity
def group_vulnerabilities(vulnerabilities):
    groups = {}  # Dictionary to store groups of vulnerabilities
    group_id = 1  # Counter for unique group tags

    for vuln in vulnerabilities:
        matched = False  # Flag to check if a vulnerability matches an existing group

        # Check if the current vulnerability matches any existing group
        for tag, group in groups.items():
            if vuln["endpoint"] == group[0]["endpoint"] and vuln["cve"] == group[0]["cve"]:
                group.append(vuln)  # Add to the matched group
                vuln["tag"] = tag   # Assign the group tag to the vulnerability
                matched = True
                break
        
        # If no match is found, create a new group
        if not matched:
            tag = f"group_{group_id}"  # Generate a new group tag
            vuln["tag"] = tag         # Assign the new tag to the vulnerability
            groups[tag] = [vuln]      # Create a new group
            group_id += 1

    # Flatten the grouped vulnerabilities into a single list
    result = [vuln for group in groups.values() for vuln in group]
    return result

# Initialize the Flask application
app = Flask(__name__)

# Define an API endpoint to return grouped vulnerabilities
@app.route('/vulnerabilities', methods=['GET'])
def vulnerabilities_endpoint():
    # Fetch vulnerabilities from the database
    vulnerabilities = get_vulnerabilities()

    # Group vulnerabilities by similarity
    grouped_vulnerabilities = group_vulnerabilities(vulnerabilities)

    # Return the grouped vulnerabilities as a JSON response
    return jsonify(grouped_vulnerabilities)

# Run the Flask app in debug mode
if __name__ == '__main__':
    app.run(debug=True)
